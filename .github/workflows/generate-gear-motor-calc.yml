name: Generate GearMotorCalc.xlsx

on:
  push:
    branches: [ excel-template ]
  workflow_dispatch:

jobs:
  build-xlsx:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          ref: excel-template

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install XlsxWriter

      - name: Generate GearMotorCalc.xlsx
        run: |
          python - <<'PY'
          import xlsxwriter

          wb = xlsxwriter.Workbook('GearMotorCalc.xlsx')

          # Formats (Excel applica i separatori locali in visualizzazione)
          head = wb.add_format({'bold': True, 'bg_color': '#F2F2F2', 'border': 1})
          num  = wb.add_format({'num_format': '#,##0.00'})
          intf = wb.add_format({'num_format': '#,##0'})
          perc = wb.add_format({'num_format': '0.00%'})

          # Sheet: Input Dati
          ws = wb.add_worksheet('Input Dati')
          ws.set_column('A:A', 28)
          ws.set_column('B:B', 18)
          ws.set_column('C:C', 10)
          ws.set_column('D:D', 50)
          ws.write_row('A1', ['Parametro', 'Valore', 'Unità', 'Note'], head)
          rows = [
              ('Massa bobina [kg]', 350, 'kg', 'Inserisci la massa della bobina'),
              ('Diametro bobina [mm]', 550, 'mm', 'Diametro medio della bobina'),
              ('Tempo di rotazione [s]', 3, 's', 'Durata trazione/accelerazione'),
              ('Tempo di pausa [s]', 2, 's', 'Pausa tra cicli'),
              ('Velocità bobina [rpm]', 80, 'rpm', 'Velocità target della bobina'),
              ('Rendimento riduttore [-]', 0.95, '-', 'Tipico 0.90–0.97'),
              ('Rendimento motore [-]', 0.90, '-', 'Tipico 0.85–0.92'),
              ('Fattore di servizio', 'S3', '-', 'Classe di funzionamento intermittente'),
              ('Coppia resistente carico [Nm]', 0, 'Nm', 'Attriti / carichi esterni (stima)'),
              ('n motore nominale target [rpm]', 1500, 'rpm', 'Usato per calcolare i'),
          ]
          for r, (p, v, u, n) in enumerate(rows, start=2):
              ws.write(f'A{r}', p)
              # formattazioni per colonna B in base al tipo/parametro
              fmt = num
              if isinstance(v, (int, float)):
                  if p in ('Rendimento riduttore [-]', 'Rendimento motore [-]'):
                      fmt = perc
                  elif u in ('rpm', 'mm'):
                      fmt = intf
                  elif u in ('kg', 's', 'Nm'):
                      fmt = num
                  ws.write_number(r-1, 1, v, fmt)
              else:
                  ws.write(f'B{r}', v)
              ws.write(f'C{r}', u)
              ws.write(f'D{r}', n)

          # Convalida per Fattore di servizio (B9)
          ws.data_validation('B9', {'validate': 'list', 'source': ['S1','S2','S3','S4','S5','S6','S7','S8','S9']})

          # Nomi definiti
          names = {
              'MASSA':     "='Input Dati'!$B$2",
              'DIAMETRO_MM':"='Input Dati'!$B$3",
              'T_ROT':     "='Input Dati'!$B$4",
              'T_PAUSA':   "='Input Dati'!$B$5",
              'N_BOBINA':  "='Input Dati'!$B$6",
              'ETA_RID':   "='Input Dati'!$B$7",
              'ETA_MOT':   "='Input Dati'!$B$8",
              'FATT_SERV': "='Input Dati'!$B$9",
              'T_RES':     "='Input Dati'!$B$10",
              'N_MOT_TGT': "='Input Dati'!$B$11",
          }
          for n, ref in names.items():
              wb.define_name(f"{n}={ref}")

          # Sheet: Calcoli
          sc = wb.add_worksheet('Calcoli')
          sc.set_column('A:A', 36)
          sc.set_column('B:B', 20)
          sc.write_row('A1', ['Calcolo', 'Valore'], head)
          calcs = [
              ('Raggio medio r [m]',                 '=DIAMETRO_MM/1000/2'),          # B2
              ('Momento di inerzia J [kg·m^2]',      '=0.5*MASSA*(B2^2)'),            # B3
              ('Velocità angolare ω [rad/s]',        '=2*PI()*N_BOBINA/60'),          # B4
              ('Accelerazione angolare α [rad/s^2]', '=IF(T_ROT<=0,NA(),B4/T_ROT)'),  # B5
              ('Coppia accelerazione (carico) [Nm]', '=B3*B5'),                       # B6
              ('Coppia totale (carico) [Nm]',        '=B6+T_RES'),                     # B7
              ('Potenza (carico) [kW]',              '=B7*N_BOBINA/9550'),            # B8
              ('Rapporto di riduzione i [-]',        '=N_MOT_TGT/N_BOBINA'),          # B9
              ('Velocità motore [rpm]',              '=N_BOBINA*B9'),                 # B10
              ('Coppia motore [Nm]',                 '=B7/(ETA_RID*B9)'),             # B11
              ('P motore meccanica [kW]',            '=B11*B10/9550'),                # B12
              ('P elettrica richiesta [kW]',         '=B12/ETA_MOT'),                 # B13
              ('Periodo ciclo T [s]',                '=T_ROT+MAX(T_PAUSA,0)'),        # B14
              ('Duty cycle S3 [-]',                  '=IF(B14=0,0,T_ROT/B14)'),       # B15
              ('Cicli al minuto [1/min]',            '=IF(B14=0,0,60/B14)'),          # B16
              ('Coppia eq. RMS carico [Nm]',         '=IF(B14=0,0,SQRT((B7^2*T_ROT)/B14))'), # B17
              ('Coppia eq. RMS motore [Nm]',         '=IF(B14=0,0,B17/(ETA_RID*B9))'),       # B18 (fix)
          ]
          for i, (label, formula) in enumerate(calcs, start=2):
              sc.write(f'A{i}', label)
              sc.write_formula(f'B{i}', formula)

          # Sheet: Ciclo
          cyc = wb.add_worksheet('Ciclo')
          cyc.set_column('A:C', 18)
          cyc.write_row('A1', ['fs [Hz]', 20])
          cyc.write('A2', 'nAcc');   cyc.write_formula('B2', '=MAX(2,ROUNDUP(T_ROT*B1,0))')
          cyc.write('A3', 'nPause'); cyc.write_formula('B3', '=MAX(0,ROUNDUP(T_PAUSA*B1,0))')

          wb.define_name("FS='Ciclo'!$B$1")
          wb.define_name("NACC='Ciclo'!$B$2")
          wb.define_name("NPAUSE='Ciclo'!$B$3")

          cyc.write_row('A5', ['Tempo [s]','Coppia carico [Nm]','Velocità bobina [rpm]'], head)
          start_row = 6
          total_rows = 300
          for idx in range(total_rows):
              r = start_row + idx
              # Tempo
              if idx == 0:
                  cyc.write_formula(r-1, 0, '=0')
              else:
                  cyc.write_formula(r-1, 0, f'=A{r-1}+1/FS')
              # Coppia: T_tot durante accelerazione, poi 0
              cyc.write_formula(r-1, 1, f"=IF(ROW()-5<=NACC, Calcoli!$B$7, 0)")
              # Velocità: rampa durante accelerazione, poi 0
              cyc.write_formula(r-1, 2, f"=IF(ROW()-5<=NACC, (ROW()-6)/(NACC-1)*N_BOBINA, 0)")

          # Grafico
          chart = wb.add_chart({'type':'line'})
          chart.set_title({'name':'Ciclo di lavoro (S3): Coppia e Velocità'})
          chart.set_x_axis({'name':'Tempo [s]'})
          chart.set_y_axis({'name':'Coppia carico [Nm]'})
          chart.set_y2_axis({'name':'Velocità bobina [rpm]'})
          chart.add_series({
              'name': 'Coppia carico [Nm]',
              'categories': f"='Ciclo'!$A$6:$A${start_row+total_rows-1}",
              'values':     f"='Ciclo'!$B$6:$B${start_row+total_rows-1}",
              'line': {'color':'#d62728', 'width': 1.5},
          })
          chart.add_series({
              'name': 'Velocità bobina [rpm]',
              'categories': f"='Ciclo'!$A$6:$A${start_row+total_rows-1}",
              'values':     f"='Ciclo'!$C$6:$C${start_row+total_rows-1}",
              'y2_axis': True,
              'line': {'color':'#1f77b4', 'width': 1.5},
          })
          cyc.insert_chart('E6', chart)

          wb.close()
          PY

      - name: Commit GearMotorCalc.xlsx
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add GearMotorCalc.xlsx
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Add GearMotorCalc.xlsx [skip ci]"
            git push origin excel-template
          fi
